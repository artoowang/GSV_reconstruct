%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION streetview_download_landmark (landmark_id, comp_id)
%
% 	Download Google StreetView panoramas based on current georeferenced 
%	photos, and cut the panoramas into perspective images and copy to
%	landmark directories. Note: this script requires a list of panorama
%	IDs which is generated by
%	http://www.cs.cornell.edu/w8/~cpwang/Landmarks3/GSVScraper/streetview_panoid.html
%
% INPUTS:
%	landmark_id:	e.g., 0016
%	comp_id:		e.g., 1339.0
%
% Modified by: Chun-Po Wang, 2011 Cornell University
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function streetview_download_landmark (landmark_id, comp_id)

	% Check input
	if(isempty(landmark_id) || isempty(comp_id))
		error('ID cannot be empty: LID = %s, CID = %s', landmark_id, comp_id);
	end

	landmark_comp_id = sprintf('%s.%s', landmark_id, comp_id);

	% Paths
	root_path = '/hydra/S4/Landmarks3';
	tmp_path = [root_path '/tmp/GSVdownloader/' landmark_comp_id];

	% This is where we store the list of panorama IDs generated by 
	% http://www.cs.cornell.edu/w8/~cpwang/Landmarks3/GSVScraper/streetview_panoid.html
	data_path = [root_path '/webroot/GSVScraper/data'];
	list_file_src_path = [data_path '/' landmark_comp_id];
	if(~exist(list_file_src_path, 'file'))
		fprintf('Warning: panorama ID list for %s is not found. Abort\n', landmark_comp_id);
		return;
	end

	% Build working directory
	removeDir(tmp_path);
	mkdir(tmp_path);

	% Copy panoid list file
	list_file_path = [tmp_path, '/' landmark_comp_id];
	system(sprintf('/bin/cp -f ''%s'' ''%s''', list_file_src_path, list_file_path));

	% Generate mapping file from the list file
	mapping_file_path = [tmp_path, '/' landmark_comp_id '.mapping.txt'];
	mapping_utility_path = [root_path '/utils/GSVdownloader/generateMapping.py'];
	system(sprintf('%s ''%s'' > ''%s''', mapping_utility_path, list_file_path, mapping_file_path));
	
	% Start downloading the panoramas
	streetview_download_panorama(tmp_path, list_file_path, tmp_path);
	cutout_dir = [tmp_path '/cutouts'];
	streetview_cutout(tmp_path, cutout_dir, mapping_file_path);
	
	% Move the files to landmark's directory
	landmark_dir = [root_path '/data/' landmark_id];
	gsv_dir = [landmark_dir '/images/gsv/' comp_id];
	removeDir(gsv_dir);
	mkdir(gsv_dir);
	system(sprintf('/bin/mv -f %s/000/*.jpg ''%s/''', cutout_dir, gsv_dir));
	
	% Remove temporary dir
	% TODO: leave temp dir for debugging
	%removeDir(tmp_path);
end

function removeDir (dir_path)
	if(exist(dir_path, 'file'))
		if(system(['/bin/rm -rf ' dir_path]) ~= 0)
			error('Cannot remove %s, abort.', dir_path);
		end
	end
end
