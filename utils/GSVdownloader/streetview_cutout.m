%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FUNCTION streetview_cutout (pano_path, out_path, map_path)
%
%	Generates perspective view cutouts from equirectangular
%	panoramas downloaded from Google Street View.
%
% INPUTS:
%	pano_path:	path to downloaded panoramas (e.g., pano)
%	out_path:	path to directory for output cutouts (e.g., myCutouts)
%	map_path:	path to mapping.txt (generated by generateMapping.py)
%
% Author: M. Havlena
% Modified by: Chun-Po Wang, 2011 Cornell University
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function streetview_cutout (pano_path, out_path, map_path)

%% Reading data
       panoFolder = [pano_path '/'];
     cutoutFolder = [out_path '/'];
         digits = 6;               % No. of digits in panorama filaname, i.e. '000034.jpg'
 filesPerFolder = 1000;
digitsPerFolder = 3;               % No. of digits of panorama foldernames e.g './pano/034/'
addpath('./utility/');
if ~exist(cutoutFolder,'dir'), mkdir(cutoutFolder), end;
    fprintf('Reading mapping file: %s ... \n', map_path);
    fid  = fopen(map_path);
    scan = textscan(fid, '%f %f %f %s');
    pano.Idx    = scan{1,1}(:);
    pano.yawRel = scan{1,2}(:);
    pano.pitch  = scan{1,3}(:);
    pano.fname  = scan{1,4}(:);
    fclose(fid);    clear('scan');
panoIdx=pano.Idx(:);
%% *** THE MAPPING FROM OUTPUT IMAGE TO INPUT IMAGE IS CONSTANT AND IS ***
%%                      BEING PRECOMPUTED 
%% Perspective view parameters
iimh=3328;  iimw=6656;      % input  image size
% Note: if image width or hfov is changed, remember to change the default focal lengths written to list.new.txt
oimh=537;   oimw=936;       % output image size
hfov=1.5;                   % horizontal filed of view [rad]

f=oimw/(2*tan(hfov/2));     % focal length [pix]
ouc=(oimw+1)/2; ovc=(oimh+1)/2;             % output image center
iuc=(iimw+1)/2; ivc=(iimh+1)/2;             % input image center    
%% Tangent plane to unit sphere mapping
[X Y] = meshgrid(1:oimw, 1:oimh);
    X = X-ouc;   Y = Y-ovc;             % shift origin to the image center
    Z = f+0*X;
  PTS = [X(:)'; Y(:)'; Z(:)'];
% Transformation for oitch angle -04
  pitch = -04;
   Tx = expm([0     0           0        ;...
              0     0       pitch/180*pi;
              0 -pitch/180*pi   0           ]);
 PTSt = Tx*PTS;                         % rotation w.r.t x-axis about pitch angle
    Xt=reshape(PTSt(1,:),oimh, oimw);
    Yt=reshape(PTSt(2,:),oimh, oimw);
    Zt=reshape(PTSt(3,:),oimh, oimw);
    
 Theta.pitch04 = atan2(Xt, Zt);                 % cartesian to spherical
   Phi.pitch04 = atan(Yt./sqrt(Xt.^2+Zt.^2));
% Transformation for oitch angle -28
     pitch = -28;
   Tx = expm([0     0           0        ;...
              0     0        pitch/180*pi;
              0 -pitch/180*pi   0           ]);
 PTSt = Tx*PTS;                         % rotation w.r.t x-axis about pitch angle
    Xt=reshape(PTSt(1,:),oimh, oimw);
    Yt=reshape(PTSt(2,:),oimh, oimw);
    Zt=reshape(PTSt(3,:),oimh, oimw);

 Theta.pitch28 = atan2(Xt, Zt);                 % cartesian to spherical
   Phi.pitch28 = atan(Yt./sqrt(Xt.^2+Zt.^2));

%% Generating cutouts
for i=1:length(panoIdx)
    list=find(pano.Idx==panoIdx(i));    % find cutouts for given panorama
               cutoutPath = getpathByPanoIdx(panoIdx(i),cutoutFolder,...
                                             filesPerFolder,digitsPerFolder);
     if ~exist(cutoutPath,'dir'), mkdir(cutoutPath), end;
     for j=1:length(list)
         % Check whether a cutout is already generated
         if exist([cutoutPath pano.fname{list(j)}],'file'), continue, end
         if ~exist('iim')   % if the panorama is not loaded read the panorama
             fprintf('Reading panorama %u ... \n', panoIdx(i));    
               fname = [num2strdigits(panoIdx(i),digits) '.jpg'];    
            panoPath = getpathByPanoIdx(panoIdx(i),panoFolder,filesPerFolder,digitsPerFolder);
            panoPath = [panoPath fname];
                 iim = imread(panoPath); 
         end
         % Image shifting w.r.t. yaw and mapping from unit sphere grid to cylinder
             sw=iimw/2/pi;
             sh=iimh/pi;
            yaw=pano.yawRel(list(j));
            yaw=yaw/180*pi;
         if pano.pitch(list(j))==-04, THETA=Theta.pitch04; PHI=Phi.pitch04; end;
         if pano.pitch(list(j))==-28, THETA=Theta.pitch28; PHI=Phi.pitch28; end;
            THETA = THETA+yaw;
             idx  =  find(THETA<pi );  THETA(idx) =  THETA(idx)+2*pi;    % out of the left bound of pano image
             idx  =  find(THETA>=pi);  THETA(idx) =  THETA(idx)-2*pi;    % out of the right bound of pano image
             U=sw*THETA+iuc; 
             V=sh*PHI  +ivc;
           
             fprintf('Saving cutout %s \n', [cutoutPath pano.fname{list(j)}]);
             oim=iminterpnn(iim, U,V);
             imwrite(oim,[cutoutPath pano.fname{list(j)}],'jpg');      
     end %j-loop
     if exist('iim'), clear iim, end;
end% i-loop
